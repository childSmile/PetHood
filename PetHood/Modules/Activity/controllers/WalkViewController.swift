//
//  WalkViewController.swift
//  PetHood
//
//  Created by MacPro on 2024/7/10.
//  遛宠

import UIKit

class WalkViewController: ZBaseViewController {
    
    private var mapView: MAMapView!
    private var mapManager  = MapManager()
    var timer = Timer()
    var points:[AMapNaviPoint] = []
    var index = 0
    var nowPoints:[AMapNaviPoint] = []
    var dataView  = WalkDataVue(frame: .zero)
    var cutdownVue = WalkCutdownVue(frame: .zero)
    var lightVue = SwitchVue(frame: .zero)
    //是否开启电子牵引
    var openElecControl : Bool = false
    let bluetooth = BluetoothManager.shared

    override func viewDidLoad() {
        super.viewDidLoad()
        navTitle = PetActivity.WalkPet.title + "模式"
        
        initMapManager()
        
        initUI()
        
//        initTimer()
        
//        addPetPath()
        

    }
    
    private func initUI() {
        dataView.add2(view).lyt { make in
            make.bottom.equalTo(-(DHPXSW(s: (16 + SafeArea_Bottom()))))
            make.left.equalTo(DHPXSW(s: 20))
            make.right.equalTo(DHPXSW(s: -20))
            make.height.equalTo(DHPXSW(s: 266))
        }
        
        
        lightVue.add2(view).lyt { make in
            make.bottom.equalTo(dataView.snp.top).offset(DHPXSW(s: -24))
            make.right.equalTo(DHPXSW(s: -20))
            make.size.equalTo(CGSize(width: DHPXSW(s: 44), height: DHPXSW(s: 44)))
        }
        
        if let window = UIApplication.shared.windows.first {
            
            cutdownVue.add2(window).lyt { make in
                make.edges.equalTo(UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0))
            }
            
            cutdownVue.show()
        }
        
        
        dataView.pullControlClosure = { [weak self] in
            print("pullControlAction")
            self?.pullControlAction()
        }
        
        dataView.pauseClosure = {
            print("pauseAction")
        }
        dataView.goonClosure = {
            print("goonAction")
        }
        dataView.endClosure = { [weak self] in
            print("endAction")
            let vc = LineChartViewController()
            self?.navigationController?.pushViewController(vc, animated: true)
        }
        
       
        
        
    }
    
    private func pullControlAction() {
        
        let alert = CustomAlertView(
            frame: CGRect(x: 0, y: 0, width: DHPXSW(s: 308), height: DHPXSW(s: 230)),
            title: "电子牵引",
            message: "开启电子牵引后，当宠物离开蓝牙安全距离(10米左右)，将会立刻通知您！",
            okTitle: openElecControl ? "关闭" : "开启",
            okBorderColor: openElecControl ? UIColor.color(hex: 0x4C96FF) : nil,
            rightShow: true
            
        )
        alert.show()
        alert.okClosure = { [weak self] in
            self?.elecControlAction()
        }
        
        
    }
    
    private func elecControlAction() {
        openElecControl = !openElecControl
        if(openElecControl) {
            bluetooth.startScan()
        } else {
            bluetooth.stopScan()
        }
    }
    
    private func initMapManager() {
        mapManager.delegate = self
        mapView = mapManager.mapView
        mapView.add2(view).lyt { make in
            make.edges.equalTo(UIEdgeInsets(top: 0, left: 0, bottom: 0, right: 0))
        }
    }
    
    
    private func initTimer() {
        timer = Timer.scheduledTimer(timeInterval: 2.0, target: self, selector: #selector(timerAction), userInfo: nil, repeats: true)
    }
    private func addPetPath() {
       let polyString = "120.160183,30.184789;120.160233,30.184829;120.160249,30.184898;120.160243,30.184952;120.160217,30.184984;120.159986,30.185049;120.159986,30.185049;120.160115,30.185118;120.160163,30.185161;120.160163,30.185161;120.160018,30.185488;120.160018,30.185488;120.160447,30.185558;120.160989,30.185649;120.161391,30.185719;120.161563,30.185746;120.161826,30.185789;120.162373,30.185885;120.163602,30.186148;120.163666,30.186159;120.163773,30.186186;120.164036,30.18624;120.164884,30.186427;120.165045,30.186465;120.165447,30.186561;120.166257,30.186776;120.166257,30.186776;120.166643,30.185397;120.166853,30.185263;120.168145,30.185821;120.168456,30.185971;120.168998,30.18624;120.170018,30.186679;120.170656,30.186953;120.171257,30.187168;120.171632,30.187328;120.17204,30.187473;120.172169,30.187521;120.173199,30.188042;120.173343,30.18809;120.174819,30.188691;120.175972,30.189185;120.17698,30.189608;120.178488,30.190247;120.178917,30.190429;120.179116,30.190515;120.179845,30.190821;120.180398,30.19103;120.180543,30.191089;120.182533,30.192001;120.182742,30.192097;120.182887,30.192146;120.18382,30.192548;120.18382,30.192548;120.184024,30.192596;120.185376,30.193186;120.185376,30.193186;120.185762,30.193288;120.18595,30.19331;120.186095,30.19331;120.186288,30.193288;120.186449,30.193245;120.18661,30.193186;120.186771,30.193101;120.186813,30.193074;120.18691,30.193004;120.187033,30.192897;120.187135,30.192784;120.187226,30.192645;120.187355,30.192435;120.187425,30.192285;120.187597,30.191829;120.187704,30.191271;120.18772,30.191228;120.187774,30.191164;120.187838,30.190837;120.187913,30.190429;120.187929,30.190354;120.188256,30.188659;120.188439,30.187527;120.188503,30.186964;120.188568,30.186358;120.188584,30.186078;120.188605,30.185757;120.188611,30.184941;120.188578,30.18389;120.188568,30.183321;120.188498,30.182045;120.188493,30.181326;120.188439,30.179443;120.188423,30.178799;120.188433,30.178472;120.188433,30.178365;120.188428,30.178263;120.188428,30.178263;120.188262,30.177796;120.188203,30.177463;120.188176,30.177238;120.188101,30.17668;120.188069,30.176299;120.188047,30.175655;120.187978,30.175114;120.187978,30.175114;120.188015,30.17477;120.18802,30.174545;120.187999,30.17432;120.187994,30.174245;120.187951,30.174051;120.187881,30.173875;120.187623,30.173413;120.18757,30.173295;120.187538,30.173172;120.187521,30.173065;120.187521,30.172995;120.187532,30.172909;120.187559,30.172807;120.187591,30.172721;120.18764,30.172635;120.187709,30.172544;120.187843,30.172421;120.187929,30.172362;120.188069,30.172297;120.188208,30.172255;120.188358,30.172228;120.18846,30.172228;120.188578,30.172233;120.188734,30.172265;120.188943,30.172324;120.189565,30.17255;120.189903,30.172651;120.190236,30.172716;120.190429,30.172743;120.19051,30.172753;120.191121,30.172807;120.191201,30.172801;120.19125,30.172786;120.192113,30.172887;120.192548,30.172936;120.192945,30.172989;120.192961,30.172995;120.193015,30.173054;120.197054,30.173418;120.197542,30.17344;120.198041,30.17344;120.198605,30.173413;120.199264,30.173354;120.203942,30.172914;120.204768,30.172839;120.205235,30.172791;120.205701,30.172743;120.207697,30.172544;120.209419,30.172405;120.210648,30.172287;120.211018,30.172255;120.211452,30.172233;120.211876,30.172228;120.212402,30.172249;120.214746,30.172346;120.220518,30.172598;120.221795,30.172641;120.222449,30.17263;120.223115,30.172555;120.223404,30.172506;120.224043,30.172346;120.224772,30.172142;120.225099,30.172051;120.225652,30.171895;120.228672,30.171031;120.229493,30.170822;120.230426,30.170634;120.230984,30.170543;120.231451,30.170479;120.23202,30.17042;120.232813,30.170371;120.234375,30.170371;120.238709,30.170388;120.240238,30.170404;120.240924,30.170382;120.241708,30.170329;120.242142,30.17028;120.242775,30.170184;120.243773,30.170034;120.244685,30.169932;120.245189,30.1699;120.246187,30.169867;120.246187,30.169867;120.247018,30.169856;120.247555,30.169808;120.248,30.169749;120.248418,30.169674;120.248805,30.169583;120.24962,30.169352;120.252769,30.168456;120.25447,30.167979;120.254888,30.167898;120.255408,30.167823;120.256127,30.16777;120.256347,30.16777;120.256476,30.16777;120.257071,30.167818;120.257425,30.167866;120.257425,30.167866;120.257989,30.167898;120.258455,30.168011;120.258879,30.168145;120.259442,30.168344;120.259689,30.168408;120.25999,30.168451;120.260301,30.16844;120.261679,30.168161;120.261894,30.168102;120.262012,30.168054;120.262318,30.16785;120.262393,30.167743;120.262489,30.16755;120.262988,30.166413;120.263289,30.165667;120.263342,30.165334;120.263391,30.164916;120.263396,30.164787;120.263369,30.164218;120.263294,30.163462;120.263171,30.162604;120.263187,30.162395;120.263069,30.16196;120.263004,30.161697;120.262838,30.160909;120.262725,30.160276;120.262554,30.15946;120.262425,30.158758;120.262425,30.158645;120.262194,30.157653;120.262157,30.15747;120.261915,30.156231;120.261835,30.155818;120.261835,30.155818;120.262543,30.155829;120.263069,30.155823;120.263648,30.155818;120.264474,30.155807;120.265204,30.155807;120.265204,30.155807;120.265209,30.155442;120.265204,30.154847;120.265204,30.154316;120.265257,30.154042;120.265359,30.153683;120.265842,30.152508;120.266073,30.1521;120.266185,30.151961;120.266314,30.151886;120.266448,30.151832;120.266845,30.151795;120.267494,30.151768;120.267661,30.151741;120.26875,30.151762;120.269608,30.151778;120.269823,30.151778;120.27067,30.151762;120.271663,30.151752;120.271813,30.151752;120.272483,30.151746;120.272483,30.151746;120.27251,30.149778;120.272521,30.14967;120.272531,30.149365;120.272548,30.149107;120.272553,30.149026;120.272553,30.149026;120.272456,30.149021;120.272086,30.14901;120.270375,30.148957"
        let array = polyString.components(separatedBy: ";")
        print(array)
        
        for location in array {
            let temp : [String] = location.components(separatedBy: ",")
            guard let latitude = Double(temp.last ?? "nil" ) ,
                  let longitude = Double(temp.first ?? "nil") else {return}
            points.append(AMapNaviPoint.location(withLatitude: latitude, longitude: longitude))
        }
        
        print(points)
       
    }
   
    
   @objc func timerAction() {
       print("Timer fired!")
       nowPoints.append(points[index])
       index = index + 1
       mapManager.drawPath(nowPoints);
       
   }
    
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(animated)
        
        timer.invalidate()
        bluetooth.stopScan()
        
    }
    deinit {
        
        print("\(self) ===deinit")
    }

}


extension WalkViewController : MapMangerDelegate {
    
}
